/*
Copyright 2023 c-fraser

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
import com.diffplug.gradle.spotless.SpotlessExtension
import com.diffplug.gradle.spotless.SpotlessTask
import io.github.gradlenexus.publishplugin.NexusPublishExtension
import io.gitlab.arturbosch.detekt.Detekt
import org.jetbrains.dokka.gradle.DokkaTask
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.jetbrains.kotlin.util.capitalizeDecapitalize.capitalizeAsciiOnly
import org.jreleaser.gradle.plugin.JReleaserExtension
import org.jreleaser.gradle.plugin.tasks.JReleaserFullReleaseTask
import org.jreleaser.model.Active

buildscript {
  repositories { mavenCentral() }
  dependencies { classpath(libs.knit) }
}

@Suppress("DSL_SCOPE_VIOLATION")
plugins {
  alias(libs.plugins.kotlin.jvm) apply false
  alias(libs.plugins.dokka)
  alias(libs.plugins.spotless)
  alias(libs.plugins.detekt)
  alias(libs.plugins.nexus.publish)
  alias(libs.plugins.jreleaser)
  alias(libs.plugins.dependency.versions)
  alias(libs.plugins.kover)
  alias(libs.plugins.compatibility.validator)
  `java-library`
  antlr
  `maven-publish`
  signing
}

apply(plugin = "kotlinx-knit")

allprojects project@{
  apply(plugin = "org.jetbrains.kotlin.jvm")

  group = "io.github.c-fraser"
  version = "0.2.0"

  repositories { mavenCentral() }

  configure<JavaPluginExtension> { toolchain { languageVersion.set(JavaLanguageVersion.of(17)) } }

  tasks.withType<Jar> {
    manifest {
      attributes(
          "Automatic-Module-Name" to "io.github.cfraser.${this@project.name.replace("-", "")}")
    }
  }
}

java { withSourcesJar() }

dependencies {
  antlr(libs.antlr4)
  implementation(kotlin("reflect"))
  implementation(libs.kotlinx.coroutines)
  implementation(libs.kotlinx.coroutines.slf4j)
  implementation(libs.ktor.network)
  implementation(libs.ktor.network.tls)
  implementation(libs.caffeine)
  implementation(libs.neo4j.cypher.parser)
  implementation(libs.slf4j.api)

  testImplementation(libs.kotest.assertions)
  testImplementation(libs.kotest.datatest)
  testImplementation(libs.kotest.runner)
  testImplementation(libs.neo4j.java.driver)
  testImplementation(libs.testcontainers)
  testImplementation(libs.testcontainers.neo4j)
  testImplementation(libs.knit.test)
  testRuntimeOnly(libs.slf4j.nop)
}

val kotlinSourceFiles by lazy {
  fileTree(rootProject.rootDir) {
    // Exclude the files automatically generated by `kotlinx-knit`
    exclude("**/knit/**/*.kt")
    include("**/*.kt")
  }
}

configure<SpotlessExtension> {
  val ktfmtVersion = libs.versions.ktfmt.get()
  val licenseHeader =
      """
      /*
      Copyright 2023 c-fraser
      
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
      
          https://www.apache.org/licenses/LICENSE-2.0
      
      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
      */
      """
          .trimIndent()

  kotlin {
    ktfmt(ktfmtVersion)
    licenseHeader(licenseHeader)
    target(kotlinSourceFiles)
  }

  kotlinGradle {
    ktfmt(ktfmtVersion)
    licenseHeader(licenseHeader, "(import|buildscript|plugins|rootProject|@Suppress)")
    target(fileTree(rootProject.rootDir) { include("**/*.gradle.kts") })
  }
}

publishing {
  val javadocJar by
      tasks.registering(Jar::class) {
        val dokkaJavadoc by tasks.getting(DokkaTask::class)
        dependsOn(dokkaJavadoc)
        archiveClassifier.set("javadoc")
        from(dokkaJavadoc.outputDirectory.get())
      }

  publications {
    create<MavenPublication>("maven") {
      from(project.components["java"])
      artifact(javadocJar)
      pom {
        name.set(rootProject.name)
        description.set("${rootProject.name}-${project.version}")
        url.set("https://github.com/c-fraser/${rootProject.name}")
        inceptionYear.set("2023")

        issueManagement {
          system.set("GitHub")
          url.set("https://github.com/c-fraser/${rootProject.name}/issues")
        }

        licenses {
          license {
            name.set("The Apache Software License, Version 2.0")
            url.set("https://www.apache.org/licenses/LICENSE-2.0.txt")
            distribution.set("repo")
          }
        }

        developers {
          developer {
            id.set("c-fraser")
            name.set("Chris Fraser")
          }
        }

        scm {
          url.set("https://github.com/c-fraser/${rootProject.name}")
          connection.set("scm:git:git://github.com/c-fraser/${rootProject.name}.git")
          developerConnection.set("scm:git:ssh://git@github.com/c-fraser/${rootProject.name}.git")
        }
      }
    }
  }

  signing {
    publications.withType<MavenPublication>().all mavenPublication@{
      useInMemoryPgpKeys(System.getenv("GPG_SIGNING_KEY"), System.getenv("GPG_PASSWORD"))
      sign(this@mavenPublication)
    }
  }
}

val cliProject = project(":graph-guard-cli")
val cliDist: Provider<RegularFile> =
    cliProject.layout.buildDirectory.file("distributions/${cliProject.name}-shadow-$version.tar")

configure<NexusPublishExtension> publish@{
  this@publish.repositories {
    sonatype {
      nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
      snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
      username.set(System.getenv("SONATYPE_USERNAME"))
      password.set(System.getenv("SONATYPE_PASSWORD"))
    }
  }
}

configure<JReleaserExtension> {
  project {
    authors.set(listOf("c-fraser"))
    license.set("Apache-2.0")
    extraProperties.put("inceptionYear", "2023")
    description.set("Graph schema validation proxy server")
    links { homepage.set("https://github.com/c-fraser/${rootProject.name}") }
  }

  release {
    github {
      repoOwner.set("c-fraser")
      overwrite.set(true)
      token.set(System.getenv("GITHUB_TOKEN").orEmpty())
      changelog {
        formatted.set(Active.ALWAYS)
        format.set("- {{commitShortHash}} {{commitTitle}}")
        contributors.enabled.set(false)
        for (status in listOf("added", "changed", "fixed", "removed")) {
          labeler {
            label.set(status)
            title.set(status)
          }
          category {
            title.set(status.capitalizeAsciiOnly())
            labels.set(listOf(status))
          }
        }
      }
    }
    distributions { create(cliProject.name) { artifact { path.set(cliDist) } } }
  }
}

apiValidation { ignoredProjects.add(cliProject.name) }

tasks {
  withType<Test> {
    useJUnitPlatform()
    systemProperties =
        System.getProperties().asIterable().associate { it.key.toString() to it.value }
    systemProperties("org.slf4j.simpleLogger.defaultLogLevel" to "debug")
  }

  generateGrammarSource {
    outputDirectory =
        file("src/main/java/io/github/cfraser/${rootProject.name.replace("-", "")}/antlr")
  }

  val generateTestGrammarSource by getting

  withType<KotlinCompile> { dependsOn(generateGrammarSource, generateTestGrammarSource) }

  val syncDocs by creating {
    doLast {
      val docs = rootDir.resolve("docs/README.md")
      rootDir.resolve("README.md").copyTo(docs, overwrite = true)
      docs.writeText(
          docs.readText().replace(Regex("\\(docs/.*\\)")) { it.value.replace("docs/", "") })
    }
  }

  spotlessApply { dependsOn(syncDocs) }

  val spotlessKotlin by named<SpotlessTask>("spotlessKotlin")
  val spotlessKotlinGradle by
      named<SpotlessTask>("spotlessKotlinGradle") { mustRunAfter(spotlessKotlin) }

  val detektAll by
      creating(Detekt::class) {
        mustRunAfter(spotlessKotlinGradle)
        parallel = true
        buildUponDefaultConfig = true
        config.setFrom(rootDir.resolve("detekt.yml"))
        source = kotlinSourceFiles
      }

  withType<JReleaserFullReleaseTask> { dependsOn(":graph-guard-cli:shadowDistTar") }
}
