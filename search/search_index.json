{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"graph-guard","text":"<p><code>graph-guard</code> is an extensible Bolt proxy server for Neo4j 5+ (compatible databases).</p> <ul> <li>Design</li> <li>Plugins</li> <li>Schema validation<ul> <li>Schema</li> <li>Graph</li> <li>Nodes</li> <li>Relationships</li> <li>Properties</li> <li>Violations</li> <li>Grammar</li> </ul> </li> <li>Usage</li> <li>Documentation</li> <li>CLI</li> <li>Example</li> <li>Demo</li> <li>License</li> </ul>"},{"location":"#design","title":"Design","text":"<p>The Server proxies Bolt messages as displayed in the diagram below.</p> <p></p> <p>Proxied messages are intercepted by the Plugin, enabling the Server to dynamically transform the incoming and outgoing data.</p>"},{"location":"#plugins","title":"Plugins","text":"<p><code>graph-guard-plugins</code> contains various Plugin implementations to augment Server functionality.</p>"},{"location":"#schema-validation","title":"Schema validation","text":"<p>Schema.Validator is a plugin that performs realtime schema validation by intercepting RUN requests then analyzing the Cypher query (and parameters) for schema violations. If the intercepted query is determined to be invalid according to the schema, then a FAILURE response is sent to the client.</p>"},{"location":"#schema","title":"Schema","text":"<p>A schema describes the nodes and relationships in a graph. The schema is defined using a custom DSL language, demonstrated below for the movies graph.</p> <pre><code>graph Movies {\n  node Person(name: String, born: Integer):\n    ACTED_IN(roles: List&lt;String&gt;) -&gt; Movie,\n    DIRECTED -&gt; Movie,\n    PRODUCED -&gt; Movie,\n    WROTE -&gt; Movie,\n    REVIEWED(summary: String, rating: Integer) -&gt; Movie;\n  node Movie(title: String, released: Integer, tagline: String);\n}\n</code></pre>"},{"location":"#graph","title":"Graph","text":"<p>A <code>graph</code> contains node statements. A schema may include multiple interconnected graphs. To reference a node in another graph, qualify the node name with the graph name, as shown below.</p> <pre><code>graph Places {\n  node Theater(name: String):\n    SHOWING(times: List&lt;Integer&gt;) -&gt; Movies.Movie;\n}\n</code></pre>"},{"location":"#nodes","title":"Nodes","text":"<p>A <code>node</code> must have a unique name, and may have properties and/or relationship definitions.</p>"},{"location":"#relationships","title":"Relationships","text":"<p>Relationships are defined relative to the source node. A relationship definition must have a name, direction (<code>-&gt;</code> for directed, or <code>--</code> for undirected), and target node. A relationship must have a unique <code>(source)-[name]-(target)</code>, and may also have properties.</p>"},{"location":"#properties","title":"Properties","text":"<p>A node or relationship may have typed properties. The supported property types are listed below.</p> <p>The types align with the supported Cypher values.</p> <ul> <li><code>Any</code> - a dynamically typed property</li> <li><code>Boolean</code></li> <li><code>Date</code> - a   date()</li> <li><code>DateTime</code> -   a datetime()</li> <li><code>Duration</code> -   a duration()</li> <li><code>Float</code></li> <li><code>Integer</code></li> <li><code>List&lt;T&gt;</code> - where <code>T</code> is another (un-parameterized) supported type</li> <li><code>LocalDateTime</code> -   a localdatetime()</li> <li><code>LocalTime</code> -   a localtime()</li> <li><code>String</code></li> <li><code>Time</code> -   a time()</li> </ul> <p>A property can be designated as nullable by including the <code>?</code> suffix on the type, for example <code>String?</code> and <code>List&lt;Any?&gt;</code>.</p>"},{"location":"#violations","title":"Violations","text":"<p>The Cypher query validation prevents the following schema violations.</p> <ul> <li><code>\"Unknown ${entity}\"</code> - a query has a node or relationship not defined in the schema</li> <li><code>\"Unknown property '${property}' for ${entity}\"</code> - a query has a property (on a node or   relationship) not defined in the schema</li> <li><code>\"Invalid query value(s) '${values}' for property '${property}' on ${entity}\"</code> - a query has   property value(s) (on a node or relationship) conflicting with the type defined in the schema</li> </ul>"},{"location":"#grammar","title":"Grammar","text":"<p>Refer to the (antlr4) grammar for an exact specification of the schema DSL.</p>"},{"location":"#usage","title":"Usage","text":"<p>The <code>graph-guard</code> libraries are accessible via Maven Central and the <code>graph-guard-cli</code> application is published in the releases.</p> <p><code>graph-guard</code> requires Java 17+.</p> <p><code>Server</code> doesn't currently support TLS (because of ktor-network limitations). Use NGINX or a cloud load balancer to decrypt Bolt traffic for the proxy server.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>Refer to the graph-guard and graph-guard-plugins code documentation.</p>"},{"location":"#cli","title":"CLI","text":"<p>Download and run the <code>graph-guard-cli</code> application.</p> <pre><code>curl -OL https://github.com/c-fraser/graph-guard/releases/latest/download/graph-guard-app-shadow.tar\ntar -xvf graph-guard-cli-shadow.tar\n./graph-guard-cli-shadow/bin/graph-guard-cli --help\n</code></pre>"},{"location":"#example","title":"Example","text":"<p>Using the <code>graph-guard</code> libraries, validate movies queries via the Bolt proxy server.</p> <pre><code>fun runInvalidMoviesQueries(password: String) {\n    GraphDatabase.driver(\n          \"bolt://localhost:8787\",\n          AuthTokens.basic(\"neo4j\", password),\n          Config.builder().withoutEncryption().build()).use { driver -&gt;\n    driver.session().use { session -&gt;\n      /** Run the invalid [query] and print the schema violation message. */\n      fun run(query: String) {\n        try {\n          session.run(query)\n          error(\"Expected schema violation for query '$query'\")\n        } catch (exception: DatabaseException) {\n          println(exception.message)\n        }\n      }\n      run(\"CREATE (:TVShow {title: 'The Office', released: 2005})\")\n      run(\"MATCH (theMatrix:Movie {title: 'The Matrix'}) SET theMatrix.budget = 63000000\")\n      run(\"MERGE (:Person {name: 'Chris Fraser'})-[:WATCHED]-&gt;(:Movie {title: 'The Matrix'})\")\n      run(\"MATCH (:Person)-[produced:PRODUCED]-&gt;(:Movie {title: 'The Matrix'}) SET produced.studio = 'Warner Bros.'\")\n      run(\"CREATE (Keanu:Person {name: 'Keanu Reeves', born: '09/02/1964'})\")\n    }\n  }\n}\n</code></pre> <pre><code>val proxy = thread {\n  try {\n    Server(URI(boltUrl), Schema(MOVIES_SCHEMA).Validator()).run()\n  } catch (_: InterruptedException) {}\n}\nThread.sleep(3.seconds.inWholeMilliseconds) // Wait for the proxy server to initialize\nrunInvalidMoviesQueries(adminPassword)\nproxy.interrupt()\n</code></pre> <p>The code above prints the following schema violation messages.</p> <pre><code>Unknown node TVShow\nUnknown property 'budget' for node Movie\nUnknown relationship WATCHED from Person to Movie\nUnknown property 'studio' for relationship PRODUCED from Person to Movie\nInvalid query value(s) '09/02/1964' for property 'born: Integer' on node Person\n</code></pre>"},{"location":"#demo","title":"Demo","text":"<p>Refer to the demo (and source script).</p>"},{"location":"#license","title":"License","text":"<pre><code>Copyright 2023 c-fraser\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"}]}