{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"graph-guard","text":"<p><code>graph-guard</code> is a Bolt proxy server that performs realtime schema validation for Neo4j 5+ (compatible databases).</p>"},{"location":"#design","title":"Design","text":""},{"location":"#server","title":"Server","text":"<p>The proxy <code>Server</code> proxies Bolt messages as displayed in the diagram below.</p> <p></p> <p>Proxied messages are passed through the <code>Plugin</code>, enabling the <code>Server</code> to dynamically transform the incoming and outgoing Bolt messages. Schema validation is performed by intercepting RUN requests and analyzing the Cypher query (and parameters) for schema violations. If the intercepted query is determined to be invalid according to the schema, then a FAILURE response is sent to the client.</p>"},{"location":"#schema","title":"Schema","text":"<p>A schema describes the nodes and relationships in a graph. The schema is defined using <code>graph-guard</code>'s DSL language, demonstrated below for the movies graph.</p> <pre><code>graph Movies {\n  node Person(name: String, born: Integer):\n    ACTED_IN(roles: List&lt;String&gt;) -&gt; Movie,\n    DIRECTED -&gt; Movie,\n    PRODUCED -&gt; Movie,\n    WROTE -&gt; Movie,\n    REVIEWED(summary: String, rating: Integer) -&gt; Movie;\n\n  node Movie(title: String, released: Integer, tagline: String);\n}\n</code></pre>"},{"location":"#graph","title":"Graph","text":"<p>A <code>graph</code> contains node statements. A schema may include multiple interconnected graphs. To reference a node in another graph, qualify the node name with the graph name, as shown below.</p> <pre><code>graph Places {\n  node Theater(name: String):\n    SHOWING(times: List&lt;Integer&gt;) -&gt; Movies.Movie;\n}\n</code></pre>"},{"location":"#nodes","title":"Nodes","text":"<p>A <code>node</code> must have a unique name, and may have properties and/or relationship definitions.</p>"},{"location":"#relationships","title":"Relationships","text":"<p>Relationships are defined relative to the source node. A relationship definition must have a name, direction (<code>-&gt;</code> for directed, or <code>--</code> for undirected), and target node, and may also have properties. A relationship must have a unique name + source + target.</p>"},{"location":"#properties","title":"Properties","text":"<p>A node or relationship may have typed properties. The supported property types are listed below.</p> <p>The types align with the supported Cypher values.</p> <ul> <li><code>Any</code> - a dynamically typed property</li> <li><code>Boolean</code></li> <li><code>Date</code> - a   date()</li> <li><code>DateTime</code> -   a datetime()</li> <li><code>Duration</code> -   a duration()</li> <li><code>Float</code></li> <li><code>Integer</code></li> <li><code>List&lt;T&gt;</code> - where <code>T</code> is another (un-parameterized) supported type</li> <li><code>LocalDateTime</code> -   a localdatetime()</li> <li><code>LocalTime</code> -   a localtime()</li> <li><code>String</code></li> <li><code>Time</code> -   a time()</li> </ul> <p>A property can be designated as nullable by including the <code>?</code> suffix on the type, for example <code>String?</code> and <code>List&lt;Any?&gt;</code>.</p>"},{"location":"#violations","title":"Violations","text":"<p>The server's the Cypher query validation checks for and prevents the following schema violations.</p> <ul> <li><code>\"Unknown ${entity}\"</code> - a query has a node or relationship not defined in the schema</li> <li><code>\"Unknown property '${property}' for ${entity}\"</code> - a query has a property (on a node or   relationship) not defined in the schema</li> <li><code>\"Invalid query value(s) '${values}' for property '${property}' on ${entity}\"</code> - a query has   property value(s) (on a node or relationship) conflicting with the type defined in the schema</li> </ul>"},{"location":"#grammar","title":"Grammar","text":"<p>Refer to the (antlr4) grammar for an exact specification of the schema DSL.</p>"},{"location":"#usage","title":"Usage","text":"<p>The <code>graph-guard</code> library is accessible via Maven Central and the <code>graph-guard-app</code> application is published in the releases.</p> <p><code>graph-guard</code> requires Java 17+.</p> <p><code>graph-guard</code> doesn't currently support TLS (because of ktor-network limitations). Use NGINX or a cloud load balancer to decrypt Bolt traffic for the proxy server.</p>"},{"location":"#api","title":"API","text":"<p>Refer to the code documentation.</p>"},{"location":"#examples","title":"Examples","text":""},{"location":"#library","title":"Library","text":"<p>Using the <code>graph-guard</code> library, validate movies queries via the Bolt proxy server.</p> <pre><code>val proxy = thread {\n  try {\n    Server(URI(boltUrl), Schema(MOVIES_SCHEMA).Validator()).run()\n  } catch (_: InterruptedException) {}\n}\nThread.sleep(3.seconds.inWholeMilliseconds) // Wait for the proxy server to initialize\nGraphDatabase.driver(\"bolt://localhost:8787\", AuthTokens.basic(\"neo4j\", adminPassword)).use { driver -&gt;\n  driver.session().use { session -&gt;\n    /** Run the invalid [query] and print the schema violation message. */\n    fun run(query: String) {\n      try {\n        session.run(query)\n        error(\"Expected schema violation for query '$query'\")\n      } catch (exception: DatabaseException) {\n        println(exception.message)\n      }\n    }\n    run(\"CREATE (:TVShow {title: 'The Office', released: 2005})\")\n    run(\"MATCH (theMatrix:Movie {title: 'The Matrix'}) SET theMatrix.budget = 63000000\")\n    run(\"MERGE (:Person {name: 'Chris Fraser'})-[:WATCHED]-&gt;(:Movie {title: 'The Matrix'})\")\n    run(\"MATCH (:Person)-[produced:PRODUCED]-&gt;(:Movie {title: 'The Matrix'}) SET produced.studio = 'Warner Bros.'\")\n    run(\"CREATE (Keanu:Person {name: 'Keanu Reeves', born: '09/02/1964'})\")\n  }\n}\nproxy.interrupt()\n</code></pre> <p>The code above prints the following schema violation messages.</p> <pre><code>Unknown node TVShow\nUnknown property 'budget' for node Movie\nUnknown relationship WATCHED from Person to Movie\nUnknown property 'studio' for relationship PRODUCED from Person to Movie\nInvalid query value(s) '09/02/1964' for property 'born: Integer' on node Person\n</code></pre>"},{"location":"#application","title":"Application","text":"<p>Run the <code>graph-guard-app</code> application, extracted from the shadow distribution, for a local Neo4j database.</p> <p>Replace <code>x.y.z</code> with the desired graph-guard release version.</p> <pre><code>tar -xvf graph-guard-app-shadow-x.y.z.tar\ncat &lt;&lt;'EOF' | ./graph-guard-app-shadow-x.y.z/bin/graph-guard-app -s -\ngraph Schema {\n  // ...\n}\nEOF\n</code></pre>"},{"location":"#license","title":"License","text":"<pre><code>Copyright 2023 c-fraser\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"}]}