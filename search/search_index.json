{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"graph-guard","text":"<p><code>graph-guard</code> is an extensible Bolt proxy server for Neo4j 5+ (compatible databases).</p>"},{"location":"#design","title":"Design","text":"<p>The Server proxies Bolt messages as displayed in the diagram below.</p> <p></p> <p>Proxied messages are intercepted by the Plugin, enabling the Server to dynamically transform the incoming and outgoing data.</p>"},{"location":"#usage","title":"Usage","text":"<p>The <code>graph-guard*</code> libraries are accessible via Maven Central and the <code>graph-guard-cli</code> application is published in the releases.</p> <p><code>graph-guard</code> requires Java 17+.</p> <p><code>Server</code> doesn't currently support TLS (because of ktor-network limitations). Use NGINX or a cloud load balancer to decrypt Bolt traffic for the proxy server.</p>"},{"location":"#examples","title":"Examples","text":"<p>Refer to the snippets below to see how to initialize and run a <code>Server</code> with the <code>graph-guard</code> library.</p>"},{"location":"#kotlin","title":"Kotlin","text":"<pre><code>/** [Server.run] `this` [Server] in a [thread] then execute the [block]. */\nfun Server.use(wait: Duration = 1.seconds, block: () -&gt; Unit) {\n  val server = thread(block = ::run) // run the server until the thread is interrupted\n  Thread.sleep(wait.inWholeMilliseconds) // wait for the server to start in separate thread\n  try {\n    block() // execute a function interacting with the server\n  } finally {\n    server.interrupt() // interrupt the thread running the server to initiate a graceful shutdown\n  }\n}\n</code></pre> <pre><code>Server(\n  URI(boltUrl),\n  plugin { // define plugin using DSL\n    intercept { message -&gt; message.also(::println) }\n    observe { event -&gt; println(event) }\n  })\n  .use { TODO(\"interact with the running server\") }\n</code></pre>"},{"location":"#java","title":"Java","text":"<pre><code>Server.Plugin plugin = // implement async plugin; can't utilize Kotlin coroutines plugin interface in Java\n    new Server.Plugin.Async() {\n      @NotNull\n      @Override\n      public CompletableFuture&lt;Message&gt; interceptAsync(@NotNull Bolt.Message message) {\n        return CompletableFuture.supplyAsync(\n                () -&gt; {\n                  System.out.println(message);\n                  return message;\n                });\n      }\n\n      @NotNull\n      @Override\n      public CompletableFuture&lt;Void&gt; observeAsync(@NotNull Server.Event event) {\n        return CompletableFuture.supplyAsync(\n                () -&gt; {\n                  System.out.println(event);\n                  return null;\n                });\n      }\n    };\nThread server = new Thread(new Server(URI.create(boltUrl), plugin));\nserver.start(); // run the server until the thread is interrupted\nThread.sleep(1_000); // wait for the server to start in separate thread\n/* TODO: interact with the running server */\nserver.interrupt(); // interrupt the thread running the server to initiate a graceful shutdown\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>graph-guard</li> <li>graph-guard-schema</li> <li>graph-guard-script</li> </ul>"},{"location":"#cli","title":"CLI","text":"<p>Download and run the <code>graph-guard-cli</code> application.</p> <pre><code>curl -OL https://github.com/c-fraser/graph-guard/releases/latest/download/graph-guard-cli.tar\nmkdir graph-guard-cli\ntar -xvf graph-guard-cli.tar --strip-components=1 -C graph-guard-cli\n./graph-guard-cli/bin/graph-guard-cli --help\n</code></pre> <p>Refer to the demo (and source script).</p>"},{"location":"#plugins","title":"Plugins","text":"<p>The following <code>graph-guard*</code> projects contain various Plugin implementations to augment Server functionality.</p>"},{"location":"#graph-guard-schema","title":"graph-guard-schema","text":"<p>Schema.Validator is a plugin that performs realtime schema validation by intercepting RUN requests then analyzing the Cypher query (and parameters) for schema violations. If the intercepted query is determined to be invalid according to the schema, then a FAILURE response is sent to the client.</p> <p>For example, validate movies queries via the Server, using the graph-guard libraries.</p> <pre><code>fun runInvalidMoviesQueries(password: String) {\n    GraphDatabase.driver(\n          \"bolt://localhost:8787\",\n          AuthTokens.basic(\"neo4j\", password),\n          Config.builder().withoutEncryption().build()).use { driver -&gt;\n    driver.session().use { session -&gt;\n      /** Run the invalid [query] and print the schema violation message. */\n      fun run(query: String) {\n        try {\n          session.run(query)\n          error(\"Expected schema violation for query '$query'\")\n        } catch (exception: DatabaseException) {\n          println(exception.message)\n        }\n      }\n      run(\"CREATE (:TVShow {title: 'The Office', released: 2005})\")\n      run(\"MATCH (theMatrix:Movie {title: 'The Matrix'}) SET theMatrix.budget = 63000000\")\n      run(\"MERGE (:Person {name: 'Chris Fraser'})-[:WATCHED]-&gt;(:Movie {title: 'The Matrix'})\")\n      run(\"MATCH (:Person)-[produced:PRODUCED]-&gt;(:Movie {title: 'The Matrix'}) SET produced.studio = 'Warner Bros.'\")\n      run(\"CREATE (Keanu:Person {name: 'Keanu Reeves', born: '09/02/1964'})\")\n    }\n  }\n}\n</code></pre> <pre><code>val plugin = Schema(MOVIES_SCHEMA).Validator()\nval server = Server(URI(boltUrl), plugin)\nserver.use { runInvalidMoviesQueries(adminPassword) }\n</code></pre> <p>The code above prints the following schema violation messages.</p> <pre><code>Unknown node TVShow\nUnknown property 'budget' for node Movie\nUnknown relationship WATCHED from Person to Movie\nUnknown property 'studio' for relationship PRODUCED from Person to Movie\nInvalid query value(s) '09/02/1964' for property 'born: Integer' on node Person\n</code></pre>"},{"location":"#schema","title":"Schema","text":"<p>A schema describes the nodes and relationships in a graph. The schema is defined using a custom DSL language, demonstrated below for the movies graph.</p> <pre><code>graph Movies {\n  node Person(name: String, born: Integer):\n    ACTED_IN(roles: List&lt;String&gt;) -&gt; Movie,\n    DIRECTED -&gt; Movie,\n    PRODUCED -&gt; Movie,\n    WROTE -&gt; Movie,\n    REVIEWED(summary: String, rating: Integer) -&gt; Movie;\n  node Movie(title: String, released: Integer, tagline: String);\n}\n</code></pre>"},{"location":"#graph","title":"Graph","text":"<p>A <code>graph</code> contains node statements. A schema may include multiple interconnected graphs. To reference a node in another graph, qualify the node name with the graph name, as shown below.</p> <pre><code>graph Places {\n  node Theater(name: String):\n    SHOWING(times: List&lt;Integer&gt;) -&gt; Movies.Movie;\n}\n</code></pre>"},{"location":"#nodes","title":"Nodes","text":"<p>A <code>node</code> must have a unique name, and may have properties and/or relationship definitions.</p>"},{"location":"#relationships","title":"Relationships","text":"<p>Relationships are defined relative to the source node. A relationship definition must have a name, direction (<code>-&gt;</code> for directed, or <code>--</code> for undirected), and target node. A relationship must have a unique <code>(source)-[name]-(target)</code>, and may also have properties.</p>"},{"location":"#properties","title":"Properties","text":"<p>A node or relationship may have typed properties. The supported property types are listed below.</p> <p>The types align with the supported Cypher values.</p> <ul> <li><code>Any</code> - a dynamically typed property</li> <li><code>Boolean</code></li> <li><code>Date</code> - a   date()</li> <li><code>DateTime</code> -   a datetime()</li> <li><code>Duration</code> -   a duration()</li> <li><code>Float</code></li> <li><code>Integer</code></li> <li><code>List&lt;T&gt;</code> - where <code>T</code> is another (un-parameterized) supported type</li> <li><code>LocalDateTime</code> -   a localdatetime()</li> <li><code>LocalTime</code> -   a localtime()</li> <li><code>String</code></li> <li><code>Time</code> -   a time()</li> </ul> <p>A property can be designated as nullable by including the <code>?</code> suffix on the type, for example <code>String?</code> and <code>List&lt;Any?&gt;</code>.</p>"},{"location":"#metadata","title":"Metadata","text":"<p>A node, relationship, or property may have arbitrary metadata.</p> <p>Currently, the metadata is purely information, it isn't used in schema verification.</p> <pre><code>graph G {\n  node @a N(@b(c) p: Any):\n    @d R(@e(f) @g p: Any) -- N;\n}\n</code></pre> <p>The metadata annotations can have any name, and may include a value within parenthesis.</p>"},{"location":"#violations","title":"Violations","text":"<p>The Cypher query validation prevents the following schema violations.</p> <ul> <li><code>\"Unknown ${entity}\"</code> - a query has a node or relationship not defined in the schema</li> <li><code>\"Unknown property '${property}' for ${entity}\"</code> - a query has a property (on a node or   relationship) not defined in the schema</li> <li><code>\"Invalid query value(s) '${values}' for property '${property}' on ${entity}\"</code> - a query has   property value(s) (on a node or relationship) conflicting with the type defined in the schema</li> </ul>"},{"location":"#grammar","title":"Grammar","text":"<p>Refer to the (antlr4) grammar for an exact specification of the schema DSL.</p>"},{"location":"#graph-guard-script","title":"graph-guard-script","text":"<p>Script.evaluate enables plugins to be compiled and loaded from a Kotlin script. The Script.Context exposes a DSL to build plugins.</p> <p>For example, use a plugin script with the Server.</p> <pre><code>val script = \"\"\"\n@file:DependsOn(\n    \"io.github.resilience4j:resilience4j-ratelimiter:2.2.0\",\n    \"io.github.resilience4j:resilience4j-kotlin:2.2.0\")\n\nimport io.github.resilience4j.kotlin.ratelimiter.RateLimiterConfig\nimport io.github.resilience4j.kotlin.ratelimiter.executeSuspendFunction\nimport io.github.resilience4j.ratelimiter.RateLimiter\nimport java.util.concurrent.atomic.AtomicInteger\n\nplugin {\n  val rateLimiter = RateLimiter.of(\"message-limiter\", RateLimiterConfig {})\n  intercept { message -&gt; rateLimiter.executeSuspendFunction { message } }\n}\n\nplugin { \n  val messages = AtomicInteger()\n  intercept { message -&gt;\n    if (messages.getAndIncrement() == 0) println(message::class.simpleName)\n    message\n  }\n}\n\"\"\"\nval plugin = Script.evaluate(script)\nval server = Server(URI(boltUrl), plugin)\nserver.use(wait = 10.seconds) {\n  runMoviesQueries(adminPassword)\n}\n</code></pre> <p>Script compilation and evaluation takes longer, thus the 10 second <code>wait</code>.</p> <p>The code above prints the following message.</p> <pre><code>Hello\n</code></pre>"},{"location":"#license","title":"License","text":"<pre><code>Copyright 2023 c-fraser\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"}]}